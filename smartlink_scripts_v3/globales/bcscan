#!/usr/bin/python3
# coding=utf-8

'''
bcdiscover
==========
Breadcrumb scanning tool. Scan the network and discover Rajant breadcrumbs
offering the requested service name.

'''

import bcutilshcg.discovery.constants
import bcutilshcg.discovery.sup
import sys
import logging
import json
import subprocess
from string import Template


FORMAT = '%i,%p,%s,%v,%b,%w,%l%n'


def view_results(b=None, fmt=FORMAT):
    if not b:
        return
    template_fmt = fmt.replace('$', '$$').replace('%', '$')
    x = Template(template_fmt)
    x = x.safe_substitute(i=b.source, p=b.port, s=b.serial, v=b.version,
                          b=b.build, w=b.network, l=1 if b.local else 0,
                          d=b.platform if b.platform else '',
                          f=b.source_in6_flowinfo if b.source_in6_flowinfo else '',
                          c=b.source_in6_scopeid if b.source_in6_scopeid else '',
                          e='%', n='\n', t='\t')
    sys.stdout.write(str(x))


if __name__ == '__main__':

    import argparse
    parser = argparse.ArgumentParser(
        description='Scan and find Rajant Breadcrumbs attached to the network')

    parser.add_argument('--debug', action='store_true',
                        help='Enable DEBUG level logging')

    parser.add_argument('-l', '--local', action='store_true',
                        help='Only show locally attached Breadcrumb(s)')

    parser.add_argument('-f', '--format', default=FORMAT,
                        help='''Output format. (default: %(default)s)''')

    parser.add_argument('--fmthelp', action='store_true',
                        help='Show format options and exit')

    parser.add_argument('-t', '--scantime', type=int, default = 5000,
                        help='How long to scan for. (default: %(default)s)')

    parser.add_argument('-s', '--service',
                        default=bcutilshcg.discovery.constants.SERVICE_V11,
                        help='Service name to scan for. (default: "%(default)s")')

    parser.add_argument('-i', '--interface', default=None,
                        help='''Network Interface to use for discovery. If None is
                        specified, then all available interfaces are used.
                        (default: "%(default)s")''')

    parser.add_argument('--maxhits', default=0, type=int,
                        help='''Stop scanning once you have this many hits. If 0
                        value is ignored. (default: "%(default)s")''')

    args = parser.parse_args()
    del parser

    if args.fmthelp:
        print('''
Output format definition:
--------------------------
%i = the discovered breadcrumb's ip ( ip4 or ip6 )
%p = the port to use to connect to the requested service
%s = the discovered breadcrumb's serial number
%v = the discovered breadcrumb's firmware version
%b = the discovered breadcrumb's build
%w = the discovered breadcrumb's networkname
%l = 1 if there is a wired connection from the scanner to the breadcrumb
%f = ip6 source flowid
%c = ip6 source scope id
%d = breadcrumb device platform
%e = %
%t = tab
%n = newline'''
)
        exit(0)

    if args.debug:
        root = logging.getLogger()
        root.setLevel(logging.DEBUG)
        root.addHandler(logging.StreamHandler())
        logging.debug('Debugging is on...')

    if args.scantime < 100 or args.scantime > 3600000:
        raise ValueError('Invalid scantime. Expected [100-3600000]')
        exit(1)

    logging.debug('local scan     : {}'.format(True if args.local else False))
    logging.debug('scan time      : {}'.format(args.scantime))
    logging.debug('output format  : {}'.format(args.format))
    logging.debug('service name   : {}'.format(args.service))
    logging.debug('provided iface : {}'.format(args.interface if args.interface
                                               else 'all available'))

    interface_master = None
    if args.interface:
        link_data = subprocess.run(
            ['ip', '-j', 'link', 'show', args.interface], capture_output=True
        )
        iface_info = json.loads(link_data.stdout)[0]
        interface_master = iface_info.get('master', args.interface)
    logging.debug('scanning iface : {}'.format(
        interface_master  if args.interface else 'all available'
    ))


    sup = bcutilshcg.discovery.sup.SupDiscovery(interface=interface_master,
                                                service=args.service,
                                                local=args.local,
                                                scantime = 50000,
                                                maxhits=args.maxhits)
    results = sup.execute()
    [view_results(n, args.format) for n in results]
